{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Move",
				"MoveInterface"
			],
			[
				"St",
				"Steering"
			],
			[
				"get",
				"getMaxVelocity"
			],
			[
				"reset",
				"ResetPathing"
			],
			[
				"pathf",
				"Pathfinder"
			],
			[
				"st",
				"startNode"
			],
			[
				"closed",
				"closedList"
			],
			[
				"Tak",
				"TankEntity"
			],
			[
				"scree",
				"screenProperties"
			],
			[
				"curr",
				"currentLowest"
			],
			[
				"cu",
				"currentLowest"
			],
			[
				"Base",
				"BaseEntity"
			],
			[
				"N",
				"N"
			]
		]
	},
	"buffers":
	[
		{
			"file": "game.py",
			"settings":
			{
				"buffer_size": 3712,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Level_Grid.py",
			"settings":
			{
				"buffer_size": 3952,
				"line_ending": "Windows"
			}
		},
		{
			"file": "AI.py",
			"settings":
			{
				"buffer_size": 5059,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import AIE\nimport game\nimport AI\nimport Utilities\nimport abc\nimport MovementManager\nfrom IBoid import MoveInterface\n\n#Base Entity\n#   Basic base class for game Entities\n\nclass BaseEntity(MoveInterface):\n\n	def __init__(self, size):\n		self.Position = Utilities.Vector([800,600])\n		self.Rotation = 0\n		self.Velocity = Utilities.Vector([0,0])\n		self.Mass = 5\n		self.Steering = MovementManager.MovementManager(self)\n		self.spriteName = \"Undefined\"\n		self.size = size\n		self.origin = (0.5, 0.5)\n		self.spriteID = -1\n\n		self.posTarget = self.Position\n		self.endGoal = self.Position\n		self.hasPathfinder = False\n		self.pathFound = False\n		self.pathFinished = False\n		self.pathCount = -1\n		\n	def update(self, fDeltaTime ):	\n		AIE.MoveSprite( self.spriteID, self.Position[0], self.Position[1] )\n	\n	def draw(self):\n		AIE.DrawSprite( self.spriteID )\n		\n	def getImageName(self):\n		return self.imageName\n		\n	def getState(self):\n		return self.state\n	\n	def getSpriteID(self):\n		return self.spriteID\n		\n	def setSpriteID(self, a_spriteID):\n		self.spriteID = a_spriteID\n	\n	def getPosition(self):\n		return self.Position\n\n	def cleanUp(self):\n		AIE.DestroySprite( self.spriteID )\n		\n	def setPositionTarget(self, target):\n		self.posTarget = target\n\n	def isClose(self, target):\n		return abs(self.Position[0] - target[0]) < 40 and abs(self.Position[1] - target[1]) < 40\n\n	def Equals(self, other):\n		#print \"Comparing position \" + str(self.Position) + \" and endGoal \" + str(other)\n		return abs(self.Position[0] - other[0]) <= 0.05 and abs(self.Position[1] - other[1]) <= 0.05\n\n	# IBoid methods\n	def getVelocity(self):\n		return self.Velocity\n	def getMaxVelocity(self):\n		return 3\n	def getPosition(self):\n		return self.Position\n	def getMass(self):\n		return self.Mass\n\n\n#Tank Entity\n#   A simple entity that can be placed on the screen with a right click, you should modify this so that the tank can be told to \n#   navigate to a point instead of instantly move.\n\nclass TankEntity(BaseEntity):\n\n	def __init__(self):\n		self.Position = Utilities.Vector([800,600])\n		self.Rotation = 0\n		self.Velocity = Utilities.Vector([0,0])\n		self.Mass = 5\n		self.Steering = MovementManager.MovementManager(self)\n		self.spriteName = \"./images/PlayerTanks.png\"\n		self.size = (57, 72 )\n		self.origin = (0.5, 0.5)\n		self.spriteID = AIE.CreateSprite( self.spriteName, self.size[0], self.size[1], self.origin[0], self.origin[1], 71.0/459.0, 1.0 - 72.0/158.0, 128/459.0, 1.0 , 0xff, 0xff, 0xff, 0xff )\n		print \"spriteID\", self.spriteID\n		#Move Tile to appropriate location\n		\n		self.turret = Turret(self)\n		self.posTarget = self.Position\n		self.endGoal = self.Position\n		self.hasPathfinder = False\n		self.pathFound = False\n		self.pathFinished = False\n		self.pathCount = -1\n\n		#self.maxVel = maxVel\n		\n	def update(self, fDeltaTime, levelGrid ):\n		if not self.hasPathfinder:\n			self.Pathfinder = AI.AStar(levelGrid)\n			self.hasPathfinder = True\n		mouseX, mouseY = AIE.GetMouseLocation()\n		if( AIE.GetMouseButton(1)  ):\n			self.endGoal = mouseX, mouseY\n			print \"Reset Pathing\"\n			self.ResetPathing()\n			print \"endGoal set at: (%s,%s)\" % (mouseX, mouseY)\n		if not self.Equals(self.endGoal):\n			#print \"checked position against end goal.\"\n			#print \"Path Found: \" + str(self.pathFound)\n			if not self.pathFound:\n				# self.Pathfinder = AI.AStar(levelGrid)\n				# self.hasPathfinder = True\n				startNode = levelGrid.resolveGridSquare(self.Position[0], self.Position[1])\n				targetNode = levelGrid.resolveGridSquare(self.endGoal[0], self.endGoal[1])\n				#print \"Mouse X: %d, Mouse Y: %d\" % (mouseX, mouseY)\n\n				print \"Start Node: %s, Goal Node: %s\" % (startNode, targetNode)\n				self.path = self.Pathfinder.Run(int(startNode), int(targetNode))\n				self.pathFound = True\n				print \"Path: \" + str(self.path)\n			if not self.pathFinished and self.isClose(self.posTarget):\n				self.posTarget = self.NextWaypoint(self.Pathfinder.path)\n\n			# self.Velocity = (self.posTarget[0] - self.Position[0], self.posTarget[1] - self.Position[1])\n		 # 	self.Position = (self.Position[0] + self.Velocity[0] * fDeltaTime, self.Position[1] + self.Velocity[1] * fDeltaTime)\n\n		 	self.Steering.seek(Utilities.Vector(self.posTarget))\n		 	if( AIE.GetMouseButton(1) and AIE.GetMouseButton(0)  ):\n					avoider = Utilities.Vector([mouseX, mouseY])\n					\n		 	self.Steering.update()\n		 	#print \"Entity Position: %s   Steering Position: %s\" % (self.Position, self.Steering.position)\n		 	self.Position = self.Steering.position\n\n		# elif self.pathFound and self.Equals(self.endGoal):\n		# 	self.ResetPathing()\n			\n\n		AIE.MoveSprite( self.spriteID, self.Position[0], self.Position[1] )\n		self.turret.update(fDeltaTime)\n	\n	def draw(self):\n		AIE.DrawSprite( self.spriteID )\n		self.turret.draw()\n		\n	def getImageName(self):\n		return self.imageName\n		\n	def getState(self):\n		return self.state\n	\n	def getSpriteID(self):\n		return self.spriteID\n		\n	def setSpriteID(self, a_spriteID):\n		self.spriteID = a_spriteID\n	\n	def getPosition(self):\n		return self.Position\n\n	def cleanUp(self):\n		self.turret.cleanUp()\n		AIE.DestroySprite( self.spriteID )\n		\n	def setPositionTarget(self, target):\n		self.posTarget = target\n\n	def NextWaypoint(self, path):\n		#print \"PathCount: %s / %s\" % (self.pathCount, len(path))\n		if self.pathCount != len(path) - 1:\n			self.pathCount += 1\n			print \"Next Waypoint Center Coordinates: \" + str(game._level.resolveNodeCenter(path[self.pathCount]))\n			return list(game._level.resolveNodeCenter(path[self.pathCount]))\n		else:\n			print \"Path Travelled\"\n			self.pathFinished = True\n			self.pathCount = -1\n			#return game._level.resolveNodeCenter(path[self.pathCount])\n			return list(self.endGoal)\n\n	def ResetPathing(self):\n		self.Pathfinder.Clear()\n		self.pathFound = False\n		self.pathFinished = False\n		self.pathCount = -1\n\n	# IBoid methods\n	def getVelocity(self):\n		return self.Velocity\n	def getMaxVelocity(self):\n		return 10\n	def getPosition(self):\n		return self.Position\n	def getMass(self):\n		return self.Mass\n\n\n		\n#Turret\n#    This is an Entity Object that has an owner, it is up to you to implement inheritance (BaseEntity->Turret) \n#    The Turret's position is based on the location of it's owner, if it's owner (in this scenario a Tank) is moveable\n#    The turret will move with it's base/owner\n\nclass Turret(BaseEntity):\n	\n	def __init__(self, owner):\n		self.owner = owner\n		self.Position = ( 0, 0 )\n		self.Rotation = 0\n		self.spriteName = \"./images/PlayerTanks.png\"\n		self.size = (29, 60 )\n		self.origin = (0.55, 0.75)\n		self.spriteID = AIE.CreateSprite( self.spriteName, self.size[0], self.size[1], self.origin[0], self.origin[1], 129.0/459.0, 1.0 - 61.0/158.0, 157.0/459.0, 1.0 , 0xff, 0xff, 0xff, 0xff )\n		print \"spriteID\", self.spriteID\n	\n	def update(self, fDeltaTime):\n		turretLocation = self.owner.getPosition()\n		AIE.MoveSprite( self.spriteID, turretLocation[0], turretLocation[1] )\n		\n	def draw(self):\n		AIE.DrawSprite( self.spriteID )\n	\n	def	cleanUp(self):\n		AIE.DestroySprite( self.spriteID )\n\n	# make a control scheme\n		",
			"file": "Entity.py",
			"file_size": 7074,
			"file_write_time": 130426869358311839,
			"settings":
			{
				"buffer_size": 6958,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Utilities.py",
			"settings":
			{
				"buffer_size": 1104,
				"line_ending": "Windows"
			}
		},
		{
			"file": "tester.py",
			"settings":
			{
				"buffer_size": 210,
				"line_ending": "Windows"
			}
		},
		{
			"file": "MovementManager.py",
			"settings":
			{
				"buffer_size": 1797,
				"line_ending": "Windows"
			}
		},
		{
			"file": "IBoid.py",
			"settings":
			{
				"buffer_size": 288,
				"line_ending": "Windows"
			}
		},
		{
			"file": "Globals.py",
			"settings":
			{
				"buffer_size": 299,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"command_palette":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/C/Users/Student/Documents/Ian Rich Docs/Reference/example_code/pathfinder_visualize.py",
		"/C/Users/Student/Documents/Ian Rich Docs/Reference/pathfinder.py",
		"/C/Users/Student/Documents/Ian Rich Docs/Reference/priorityqueueset.py",
		"/C/Sublime Text Build 3059/Data/Packages/Default/Preferences.sublime-settings",
		"/C/Users/Student/Desktop/test.py",
		"/C/Sublime Text Build 3059/Data/Packages/User/Default (Windows).sublime-keymap",
		"/S/Justin Sucks/Its a secret to everybody/OGL2DE-Font/resources/NESish.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/ianEngine/resources/FontSheet.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/ianEngine/resources/sheet.xml",
		"/S/Justin Sucks/Its a secret to everybody/OGL2DE-Animation/resources/MegamanXSheet.xml",
		"/S/Justin Sucks/Its a secret to everybody/OGL2DE-Animation/resources/MegamanXAnimations.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/ianEngine/resources/animationData.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/ianEngine/resources/sheetold.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/resources/images/hommBoat/sheet.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/resources/images/hommBoat/sheet22x.xml",
		"/C/Users/Student/Documents/GitHub/ianEngine_1493/ianEngine/resources/images/hommBoat/sheet2.xml",
		"/C/Users/justinl/Documents/GitHub/OGL2DE/resources/MegamanXAnimations.xml",
		"/B/GitHub/OGL2DE/resources/MegamanXSheet.xml",
		"/B/GitHub/OGL2DE/resources/MegamanXAnimations.xml"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"range",
			"0",
			"data",
			"vec2",
			"index",
			"parent",
			"nodes",
			"closedList",
			"nodes",
			"openList",
			"resolveGridSquare",
			"adjacent",
			"index",
			"i",
			"255",
			"pathMap",
			"AdjacentNodes",
			"cell",
			"slice",
			".png",
			"E",
			"e",
			"E",
			"e",
			"E"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "game.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3712,
						"regions":
						{
						},
						"selection":
						[
							[
								2442,
								2442
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 405.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Level_Grid.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3952,
						"regions":
						{
						},
						"selection":
						[
							[
								3225,
								3225
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "AI.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5059,
						"regions":
						{
						},
						"selection":
						[
							[
								313,
								313
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Entity.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6958,
						"regions":
						{
						},
						"selection":
						[
							[
								4266,
								4266
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1890.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Utilities.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1104,
						"regions":
						{
						},
						"selection":
						[
							[
								49,
								49
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "tester.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 210,
						"regions":
						{
						},
						"selection":
						[
							[
								160,
								160
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "MovementManager.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1797,
						"regions":
						{
						},
						"selection":
						[
							[
								712,
								712
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": -0.0,
						"translation.y": 360.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "IBoid.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 288,
						"regions":
						{
						},
						"selection":
						[
							[
								115,
								115
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "Globals.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 299,
						"regions":
						{
						},
						"selection":
						[
							[
								299,
								299
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 254.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "ScriptingProject.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 188.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
